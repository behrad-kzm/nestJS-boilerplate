version: "3.3"

services:

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: always
    ports:
      - 16686:16686
      - 4317:4317

  otel-collector:
    image: otel/opentelemetry-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./infrastructure/otel-collector-config.yml:/etc/otel-collector-config.yml:ro,Z
    ports:
      - "14278:14278"
      - "4318:4318"
      - "8889:8889"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml:ro,Z
    ports:
      - "9090:9090"
      
  elasticsearch:
    image: elasticsearch:7.17.9
    volumes:
      - ./infrastructure/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
    restart: unless-stopped

  kibana:
    image: kibana:7.17.9
    volumes:
      - ./infrastructure/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      - xpack.security.enabled=false
      - xpack.ml.enabled=false
    restart: unless-stopped

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.17.9
    user: root
    volumes:
      - ./infrastructure/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro,Z
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
  
  mysql:
    image: mysql:8.0.31
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}

  boilerplate-top:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SERVICE_NAME="API_TOP"
      - NEXT_SERVICE_URL=http://boilerplate-middle:3000
    volumes:
      - ./env-config:/usr/src/app/.env:ro,Z
    depends_on:
      - mysql
    ports:
      - 3000:3000

  boilerplate-middle:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SERVICE_NAME="API_MIDDLE"
      - NEXT_SERVICE_URL=http://boilerplate-bottom:3000
    volumes:
      - ./env-config:/usr/src/app/.env:ro,Z
    depends_on:
      - mysql
    ports:
      - 3001:3000
  
  boilerplate-bottom:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SERVICE_NAME="API_BOTTOM"
      - NEXT_SERVICE_URL=
    volumes:
      - ./env-config:/usr/src/app/.env:ro,Z
    depends_on:
      - mysql
    ports:
      - 3002:3000

  # apmserver:
  #   image: docker.elastic.co/apm/apm-server:7.17.9
  #   cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
  #   cap_drop: ["ALL"]
  #   ports:
  #   - 8200:8200
  #   command: >
  #      apm-server -e
  #        -E apm-server.rum.enabled=true
  #        -E setup.kibana.host=kibana:5601
  #        -E setup.template.settings.index.number_of_replicas=0
  #        -E apm-server.kibana.enabled=true
  #        -E apm-server.kibana.host=kibana:5601
  #        -E output.elasticsearch.hosts=["elasticsearch:9200"]
  #   restart: always


  # jaeger:
  #   image: jaegertracing/all-in-one
  #   ports:
  #     - 16686:16686
  #     - 4317:4317
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #     - METRICS_STORAGE_TYPE=prometheus
  #     - PROMETHEUS_SERVER_URL=http://prometheus:9090
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - ES_SERVER_URLS=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   restart: always

  # jaeger-collector:
  #   image: jaegertracing/jaeger-collector
  #   ports:
  #     - "14269:14269"
  #     - "14268:14268"
  #     - "14267:14267"
  #     - "14250:14250"
  #     - "9411:9411"
  #     - "4317:4317"
  #   networks:
  #     - elastic-jaeger
  #   restart: on-failure
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #   command: [
  #     "--es.server-urls=http://elasticsearch:9200",
  #     "--es.num-shards=1",
  #     "--es.num-replicas=0",
  #     "--log-level=error"
  #   ]
  #   depends_on:
  #     - elasticsearch

  # jaeger-agent:
  #   image: jaegertracing/jaeger-agent
  #   hostname: jaeger-agent
  #   command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #   networks:
  #     - elastic-jaeger
  #   restart: on-failure
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #   depends_on:
  #     - jaeger-collector

  # jaeger-query:
  #   image: jaegertracing/jaeger-query
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - no_proxy=localhost
  #   ports:
  #     - "16686:16686"
  #     - "16687:16687"
  #   networks:
  #     - elastic-jaeger
  #   restart: on-failure
  #   command: [
  #     "--es.server-urls=http://elasticsearch:9200",
  #     "--span-storage.type=elasticsearch",
  #     "--log-level=debug"
  #   ]
  #   depends_on:
  #     - jaeger-agent
